# Software beginning

* Byte Ordering in words
 - 프로세서가 메모리에 저장하는 방식
 - Little Endian : 상위bit(MSB)를 상위 주소에 저장
 - Big Endian : 상위bit(MSB)를 하위 주소에 저장
 - ARM의 경우에는 Little Endian을 지원(default)
(사람이 읽기 편하게 메모리에 저장되면 big endian, 사람이 읽기 불편하면 little endian)

* ADS(ARM Developer's Suit)
 - ARM에서 동작하는 Software를 만들어 주는 Compiler
 - 그 외에 GNU 계열의 ARM GCC Compiler도 있음

* 컴파일 시퀀스
Source file(*.c) ----------> Assembly(*.s) ----------> small ELF(*.o) ----------> big ELF(*.bin)
            compiler(armcc, tcc)        assembler(armasm)          armlink(armlink)
              preprocessor(*.i)  

* Library(Archive file[아카이브 파일]) : 미리 컴파일을 해 놓은 Object file의 모음
오프젝트(*.o) ----------> 라이브러리(*.lib)
         archive(armar)
 - example : armar -r *.lib *.o
		 
* 컴파일 옵션
-E : 전처리기 옵션 (tcc -E *.c --> *.i)
-S : 어셈블리 옵션 (tcc -S *.c --> *.s)
-D : Define 옵션 (tcc -DTHREE=3 --> #define THREE 3)
-U : Undefine 옵션 (tcc -UTHREE=3 --> #define THREE 3 삭제)
-W : Warning Level 옵션 (tcc -Wall --> 모든 Warning을 compile 결과로 받아 봄)
-I : include path 옵션 (tcc -I../../Drivers/include --> Drivers/include 폴더 참조)
-J : default include path 옵션 (-JC:/Keil_V5/ARM/include --> default 폴더 변경)
-c : tcc에게 linker로 하여금 link를 하지 말라는 의미 (tcc -c *.c --> *.o)
  └ 최종 실행 가능한 file이 아니라, link가 가능한 object file로 만듬

* 변수의 Scope
auto 변수 유형 -> LOCAL 변수
 - 함수 안쪽에 정의, auto 생략 가능
 - 생존기간은 함수 내부
extern 변수 유형 -> GLOBAL 변수
 - 함수 바깥쪽에 정의, extern 생략 가능
 - 생존기간은 *.c 파일 내부
 - 다른 file에서도 불러다 쓸 수 있음 (다른 file의 쓰고자 하는 위치에 extern 붙여서 선언만 해주면 됨)
static 변수 유형 -> 값은 항상 유지 하되, 그 변수를 선언한 함수 또는 파일에서만 사용하도록 국한 시키는 속성
 - Local static : 생존기간은 함수 내부지만, 함수가 끝나더라도 값은 유지
 - Global static : 생존기간은 *.c 파일 내부지만, 다른 file에서 extern 선언하여 가져갈 수 없음
  (C++의 protect와 같은 원리)

* Symbol : 전역변수의 이름이나 함수의 이름
 - Linker가 알아볼 수 있는 기본 단위, Link를 한 후에는 자신만의 주소를 갖게 되는 특별한 단위
 - Linker만의 pointer
 - GLOBAL 이라고 보면 됨 (Symbol이 아닌 건 LOCAL)
 
* Bootloader
 - NOR MCP에서는 RW와 ZI를, NAND MCP에서는 RO, RW, ZI를 RAM에 Loading(복사) 해 주는 일을 담당
 - Linker가 만들어주는 Symbol을 이용해서 RO, RW, ZI 영역을 자유자재로 접근 가능 (/w Scatter loading)
 - Scatter loading은 Load view(Load)와 Execution view(Image)를 제공
  ㆍ Load view는 Flash(ROM)에 어떻게 담겨 있을 것이냐, Execution view는 RAM에 어떻게 복사되어서 실행 될 것이냐는 걸 의미
 - Bootloader가 해야 할 일 정리
  1) Power-on 또는 reset switch에 의하여 시스템 reset
  2) Reset handler로 pc 이동.
  3) Interrupt를 Disable하여 Interrupt가 걸리지 않게 막는다.
  4) Watch-dog Timer를 initialization
  5) System clock을 initialization and setting
  6) Memory controller initialization
  7) 각 mode들, 즉, SVC, USR, ABT, IRQ, FIQ, Undef 등의 stack을 initialization
  8) NAND MCP의 경우에 RO/ RW를 Execution 주소에 맞게 제대로 복사하는 일을 해야 하고,
     NOR MCP의 경우에는 RW를 Execution 주소에 맞게 제대로 복사해 줘야 하고요.
  8) ZI 영역을 0으로 채우는 일을 해주고요.
  9) main함수 등의 C함수로 branch하여 System을 Start합니다.

* Stack
 - 일단 줄 수 있는 만큼 크게 Stack을 준 후에 Test를 해서, 적당한 Stack 크기를 잡게 되는데요, 보통 여러가지 시나리오를 통해서 Stack이 최대 얼마나 사용되는지 확인하고요, 그 최대 크기를 전체 Stack의 크기의 3/4으로 잡아서 System을 만들면 십중 팔구, Stack이 모자라서 Overflow가 나거나 하는 일은 없답니다.
